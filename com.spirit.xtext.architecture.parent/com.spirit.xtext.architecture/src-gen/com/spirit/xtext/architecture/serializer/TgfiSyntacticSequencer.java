/*
 * generated by Xtext 2.17.1
 */
package com.spirit.xtext.architecture.serializer;

import com.google.inject.Inject;
import com.spirit.xtext.architecture.services.TgfiGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class TgfiSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TgfiGrammarAccess grammarAccess;
	protected AbstractElementAlias match_MainTgf___RightCurlyBracketKeyword_9_3_RulesKeyword_9_0_LeftCurlyBracketKeyword_9_1__a;
	protected AbstractElementAlias match_MainTgf___RulesKeyword_9_0_LeftCurlyBracketKeyword_9_1_RightCurlyBracketKeyword_9_3__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TgfiGrammarAccess) access;
		match_MainTgf___RightCurlyBracketKeyword_9_3_RulesKeyword_9_0_LeftCurlyBracketKeyword_9_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getMainTgfAccess().getRightCurlyBracketKeyword_9_3()), new TokenAlias(false, false, grammarAccess.getMainTgfAccess().getRulesKeyword_9_0()), new TokenAlias(false, false, grammarAccess.getMainTgfAccess().getLeftCurlyBracketKeyword_9_1()));
		match_MainTgf___RulesKeyword_9_0_LeftCurlyBracketKeyword_9_1_RightCurlyBracketKeyword_9_3__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getMainTgfAccess().getRulesKeyword_9_0()), new TokenAlias(false, false, grammarAccess.getMainTgfAccess().getLeftCurlyBracketKeyword_9_1()), new TokenAlias(false, false, grammarAccess.getMainTgfAccess().getRightCurlyBracketKeyword_9_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_MainTgf___RightCurlyBracketKeyword_9_3_RulesKeyword_9_0_LeftCurlyBracketKeyword_9_1__a.equals(syntax))
				emit_MainTgf___RightCurlyBracketKeyword_9_3_RulesKeyword_9_0_LeftCurlyBracketKeyword_9_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MainTgf___RulesKeyword_9_0_LeftCurlyBracketKeyword_9_1_RightCurlyBracketKeyword_9_3__a.equals(syntax))
				emit_MainTgf___RulesKeyword_9_0_LeftCurlyBracketKeyword_9_1_RightCurlyBracketKeyword_9_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('}' 'Rules:' '{')*
	 *
	 * This ambiguous syntax occurs at:
	 *     genPackage=STRING 'Rules:' '{' (ambiguity) rules+=Rule
	 *     hlfunctionName=STRING 'Rules:' '{' (ambiguity) rules+=Rule
	 *     name=ID '{' 'Rules:' '{' (ambiguity) rules+=Rule
	 *     objectiveName=STRING 'Rules:' '{' (ambiguity) rules+=Rule
	 *     rules+=Rule (ambiguity) rules+=Rule
	 *     satName=STRING 'Rules:' '{' (ambiguity) rules+=Rule
	 *     statusName=STRING 'Rules:' '{' (ambiguity) rules+=Rule
	 *     versionName=STRING 'Rules:' '{' (ambiguity) rules+=Rule
	 */
	protected void emit_MainTgf___RightCurlyBracketKeyword_9_3_RulesKeyword_9_0_LeftCurlyBracketKeyword_9_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('Rules:' '{' '}')*
	 *
	 * This ambiguous syntax occurs at:
	 *     genPackage=STRING (ambiguity) prof+=Profile
	 *     hlfunctionName=STRING (ambiguity) prof+=Profile
	 *     name=ID '{' (ambiguity) prof+=Profile
	 *     objectiveName=STRING (ambiguity) prof+=Profile
	 *     rules+=Rule '}' (ambiguity) prof+=Profile
	 *     satName=STRING (ambiguity) prof+=Profile
	 *     statusName=STRING (ambiguity) prof+=Profile
	 *     versionName=STRING (ambiguity) prof+=Profile
	 */
	protected void emit_MainTgf___RulesKeyword_9_0_LeftCurlyBracketKeyword_9_1_RightCurlyBracketKeyword_9_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
