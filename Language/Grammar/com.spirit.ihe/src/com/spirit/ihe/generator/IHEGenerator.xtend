/*
 * generated by Xtext 2.17.0
 */
package com.spirit.ihe.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import javax.inject.Inject
import com.spirit.ihe.iHE.MainTgf
import com.spirit.ihe.iHE.Profile

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class IHEGenerator extends AbstractGenerator {

	String packageGenerated;
	String parentSAT;
	String packageDirectory;
	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// check the package
		// first of all, we have to filter the contents of the resource down to the defined entitites. 
		// For each profile, we instantiate an ABB actor.
		for (e : resource.allContents.toIterable.filter(MainTgf)) { // just one
			if (e.genPackage !== null) {
				packageGenerated = e.genPackage;
				packageDirectory = packageGenerated.replace(".", "/")
				println("Package generated is not null, so I am generating " + packageGenerated + " in directory " +
					packageDirectory)

			} else {
				packageDirectory = e.fullyQualifiedName.toString("/");
				println("No package to be generated, thus creating " + packageDirectory)
			}
			println("Generating SAT: " + packageDirectory + "/" + e.name)
			fsa.generateFile(packageDirectory + "/" + e.name + ".java", e.compileSAT);
			parentSAT = e.name;
			println("Generating list of AllABBs.java")
			fsa.generateFile(packageDirectory + "/" + "AllABBs.java", e.compileLIST)
		}

		// Here I generate the classes for each profile
		for (e : resource.allContents.toIterable.filter(Profile)) {
			println("+++");
			println(resource.URI);
			println(resource.class);
			println(e);
			println(e.class);
			println("Generating profile " + packageDirectory + "/" + e.name + ".java")

			println("---");
			fsa.generateFile(packageDirectory + "/" + e.name + ".java", e.compile);

		}
	}

// this compiles the list of ABBs
	def compileLIST(MainTgf e) '''
		«IF packageGenerated === null»
			package «e.eContainer.fullyQualifiedName»;
		«ELSE»
			package «packageGenerated»;
		«ENDIF»
		
		import java.util.HashMap;
		
		import com.spirit.ihe.language.bb.ABB;
		
		public class AllABBs {
			// instantiate all the ABBs
			«FOR profiles : e.prof»
				private final «profiles.name» «profiles.name.toLowerCase» = new «profiles.name»();
			«ENDFOR»
			private final HashMap<String, ABB> abbList = new HashMap<>();
			
			// Constructor. Here I instantiate the ABBs
			public AllABBs() {
				
				// Instantiate the SAT
				«e.name» «e.name.toLowerCase» = new «e.name»(«FOR profiles : e.prof»«profiles.name.toLowerCase», «ENDFOR» 0);
				
				// Add this SAT as parent SAT
				«FOR profiles : e.prof»
					«profiles.name.toLowerCase».getABB().addParentSAT(«e.name.toLowerCase».getSAT());
					abbList.put(«profiles.name.toLowerCase».getABB().getName(), «profiles.name.toLowerCase».getABB());
				«ENDFOR»
			}
			
			public HashMap<String, ABB> getAbbList() {
				return abbList;
			}
			
		}
	'''

	// this compiles the SAT
	def compileSAT(MainTgf e) '''
		«IF packageGenerated === null»
			package «e.eContainer.fullyQualifiedName»;
		«ELSE»
			package «packageGenerated»;
		«ENDIF»
		import com.spirit.ihe.language.bb.SAT;
		import com.spirit.ihe.language.bb.dependencies.TFRule;
		
		public class «e.name» {
			private SAT «e.name.toLowerCase»;
			
			private void initSAT(«FOR profiles : e.prof» «profiles.name» «profiles.name.toLowerCase», «ENDFOR» int fake) {
				«e.name.toLowerCase» = new SAT("«e.satName»", "«e.versionName»", "«e.statusName»", "«e.objectiveName»");
				«FOR rules : e.rules»
					«e.name.toLowerCase».addRule(new TFRule(«rules.split(":").get(1).trim»));
				«ENDFOR»
				«FOR profiles : e.prof»
					«e.name.toLowerCase».addSolutionPattern(«profiles.name.toLowerCase».getABB());
				«ENDFOR»
			}
			
			public «e.name»(«FOR profiles : e.prof»«profiles.name» «profiles.name.toLowerCase», «ENDFOR» int fake) {
			    initSAT(«FOR profiles : e.prof» «profiles.name.toLowerCase», «ENDFOR» 0);
			                    	
			}
			public SAT getSAT() {
			    return this.«e.name.toLowerCase»;
			}
		}
		
	'''
	

	// note that we could check if, e.g., an actor is undefined by placing it into an array
	def compile(Profile e) '''
		«IF packageGenerated === null»
			package «e.eContainer.fullyQualifiedName»;
		«ELSE»
			package «packageGenerated»;
		        «ENDIF»
		        
		import com.spirit.ihe.language.bb.ABB;
		import com.spirit.ihe.language.bb.dependencies.Actor;
		import com.spirit.ihe.language.bb.dependencies.Domain;
		import com.spirit.ihe.language.bb.dependencies.QualityAttribute;
		import com.spirit.ihe.language.bb.dependencies.Transaction;
		import com.spirit.ihe.language.bb.dependencies.SecurityRequirement;
		        
		public class «e.name» {
		    private ABB «e.name.toLowerCase»;
		        
		    private void initP() {
		        «e.name.toLowerCase» = new ABB("«e.name.toUpperCase.trim»", "«e.descrName»", "«e.featName»", "«e.functionName»");
		                                                
		                «FOR actors : e.actor»
		                	Actor «actors.toLowerCase.trim.replaceAll("^\"|\"$", "")» = new Actor("«actors.trim.replaceAll("^\"|\"$", "")»");
		        	«e.name.toLowerCase».addActor(«actors.toLowerCase.trim.replaceAll("^\"|\"$", "")»);
		        	«ENDFOR»
		        	
		        	«FOR transactions : e.transaction»
		        		Transaction «transactions.split(",").get(1).trim.toLowerCase.replaceAll("^\"|\"$", "").replace("(","").replace(")","")» = new Transaction(«transactions.split(",").get(0).trim.replace("\"", "").toLowerCase.replace("(","").replace(")","")», «transactions.split(",").get(1).trim», «transactions.split(",").get(2).trim.replace("\"", "").toLowerCase.replace("(","").replace(")","")»);
		        		«e.name.toLowerCase».addTransaction(«transactions.split(",").get(1).trim.toLowerCase.replaceAll("^\"|\"$", "").replace("(","").replace(")","")»);
		        		                
		        	«ENDFOR»
		        	
		        	«FOR domains : e.domain»
		        		Domain «domains.toLowerCase.trim.replaceAll("^\"|\"$", "")» = new Domain() { 
		        		    private String name = «domains»;
		        		    public String getName() { return name; }
		        		};
		        		«e.name.toLowerCase».addDomain(«domains.toLowerCase.trim.replaceAll("^\"|\"$", "")»);
		        		«ENDFOR»
		        		
		        		«FOR qas : e.qualityattr» 
		        		QualityAttribute «qas.toLowerCase.trim.split(" ").get(0)» = new QualityAttribute() {
		        			private String value = «qas.toLowerCase.trim.split(" ").get(1).replace("[","").replace("]","")»;
		        						
		        			@Override
		        			public void addRule(String value) {
		        			this.value = value;
		        			}
		        						
		        			@Override
		        			public String getValue() {
		        			return this.value;
		        			}
		        						            
		        			@Override
		        			public void evaluate(ABB y, ABB y2) {
		        			// place your implementation here
		        			}
		        		};
		        		«e.name.toLowerCase».addQualityAttribute(«qas.toLowerCase.trim.split(" ").get(0)»);
		        		«ENDFOR»
		        		
		        		«FOR sre : e.secre»
		        		SecurityRequirement «sre.secReID.toLowerCase.trim.split(" ").get(0)» = new SecurityRequirement() {
		        			private String form = "«sre.secreForm»";
		        			private String sensitivity = "«sre.secreSensitivity»";
		        			private String location = "«sre.secreLocation»";
		        			private String state = "«sre.secreState»";
		        			private String goal = "«sre.secreGoal»";
		        			private String descr = "«sre.secreDesc»";
		        			private String category = "«sre.secreCategory»";
		        			private String name = "«sre.secReID»";
		        			
		        			@Override
		        			public String getName() {
		        				return this.name;	
		        			}

							@Override
		        			public String getForm() {
		        				return this.form;	
		        			}
		        			@Override
		        			public String getGoal() {
		        				return this.goal;	
		        			}
		        			@Override
		        			public String getLocation() {
		        				return this.location;	
		        			}
		        			@Override
		        			public String getSensitivity() {
		        				return this.sensitivity;	
		        			}
		        			@Override
		        			public String getState() {
		        				return this.state;	
		        			}
		        			@Override
		        			public String getDescription() {
		        				return this.descr;	
		        			}
		        			@Override
		        			public String getCategory() {
		        				return this.category;	
		        			}

		        		};
		        		«e.name.toLowerCase».addSecurityRequirements(«sre.secReID.toLowerCase.trim.split(" ").get(0)»);
		        		
		        		«ENDFOR»	
		        			
		    			}
		    			
		    			public «e.name»() {
		    				    initP();
		    			
		    			}
		    			
		    			public ABB getABB() {
		    				return this.«e.name.toLowerCase»;
					}
					}
	'''
}
